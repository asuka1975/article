{"title":"【2022年版】Docker+GLFWでOpenGLプログラミング環境構築","content":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"本記事は、ブログのテストを兼ねた"},{"type":"link","title":null,"url":"https://qiita.com/asuka1975/items/5384ff4c20accb87cdca","children":[{"type":"text","value":"Qiitaからのコピー"}]},{"type":"text","value":"です。"}]},{"type":"heading","depth":1,"children":[{"type":"text","value":"はじめに"}]},{"type":"paragraph","children":[{"type":"text","value":"　本記事では、Dockerコンテナ上でグラフィックスプログラミングを行える環境の構築を説明していきます。といってもグラフィックスプログラミングにおいて、依存するライブラリは非常に少ないですしセットアップが面倒なものでは無いので、わざわざDocker上でやるようなものではないですが、ロマンということで。需要はなさそうですが書いていきます。\n今回の記事で使うファイルはすべて"},{"type":"link","title":null,"url":"https://github.com/asuka1975/gl-docker","children":[{"type":"text","value":"ここ"}]},{"type":"text","value":"に置きました。"}]},{"type":"heading","depth":1,"children":[{"type":"text","value":"対象読者"}]},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"あらゆるプログラミングを仮想化された環境で行いたい方"}]}]},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"OpenGLを使うようなシミュレーション系の研究で実験環境の移行や引き継ぎを楽にしたい方"}]}]}]},{"type":"heading","depth":1,"children":[{"type":"text","value":"想定環境"}]},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Linux"}]}]},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Docker導入済み"}]}]},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"NVIDIAグラフィックスドライバー導入済み"}]}]}]},{"type":"heading","depth":1,"children":[{"type":"text","value":"手順"}]},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Dockerfile"}]}]},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Docker上のX11アプリをホストで表示させられるようにする"}]}]},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"NVIDIA container toolkit の導入"}]}]},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"DockerでのGPU利用"}]}]}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"Dockerfile"}]},{"type":"code","lang":"dockerfile","meta":null,"value":"FROM python:3.10-slim-buster\n\nARG UID\nARG GID\nARG USERNAME\nARG GROUPNAME\n\nRUN apt update && apt upgrade -y\nRUN apt install libglfw3-dev python3-pip -y\n\nRUN mkdir -p /opt/app\n\nCOPY main.py /opt/app\n\nRUN groupadd -g $GID $GROUPNAME\nRUN useradd -m -u $UID -g $GID $USERNAME\n\nRUN chown $USERNAME:$GROUPNAME -R /opt/app\nUSER $USERNAME\n\nRUN pip install glfw PyOpenGL numpy\n\nWORKDIR /opt/app\nENTRYPOINT [\"/bin/bash\"]"},{"type":"paragraph","children":[{"type":"text","value":"以上のDockerfileで記述されたコンテナを使って、OpenGLの動作確認を行います。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"Docker上のX11アプリをホストで表示させられるようにする"}]},{"type":"paragraph","children":[{"type":"text","value":"　通常LinuxのGUIはX window systemにより実現されます。X window systemはXサーバとXクライアントからなるウィンドウシステムで"},{"type":"strong","children":[{"type":"text","value":"ソケット通信を通じてUIの描画"}]},{"type":"text","value":"を行います。Xクライアントが何を描画したいかを決め、Xサーバに描画を依頼することでGUIが実現できるわけです。今回の場合Dockerコンテナ上でXクライアントが動作し、ホストのXサーバが画面の表示やマウス・キーボード入力などを受け付ける形と成ります。\n　XサーバとXクライアントのやり取りはソケット通信を通じて行われることを述べましたが、同じコンピュータ内にXサーバとXクライアントが並立している場合には、ソケットファイルが使われます。このやり取りに使われるソケットファイルは/tmp/.unix-X11内に存在しています。つまり、"},{"type":"strong","children":[{"type":"text","value":"この/tmp/.unix-X11をコンテナ上にマウント"}]},{"type":"text","value":"してやれば、コンテナ上のXアプリをホストに表示できるようになるはずです。ただこれだけでは、ウィンドウを表示することができません。なぜならXクライアントが接続するXサーバがされていないのに加え、"},{"type":"strong","children":[{"type":"text","value":"Xクライアントを動かしているユーザーがXサーバに認証されていない"}]},{"type":"text","value":"からです。これを解決するためには以下のようにする必要があります。"}]},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"イメージビルド時"}]}]}]},{"type":"code","lang":"shell","meta":null,"value":"$ docker build -t gl \\\n        --build-arg UID=$(id -u)\\\n        --build-arg GID=$(id -g)\\\n        --build-arg USERNAME=$(id -un)\\\n        --build-arg GROUPNAME=$(id -gn) ."},{"type":"paragraph","children":[{"type":"text","value":"ビルド時にコンテナのユーザーIDとグループIDをホストのものに指定しています。こうすることで既に認証されているホストのユーザーIDとコンテナのユーザーIDが一致するので、前述の問題を解決することができます。"}]},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"コンテナ起動時"}]}]}]},{"type":"code","lang":"shell","meta":null,"value":"$ docker run -it --rm \\\n        --hostname=gltest \\\n        -e DISPLAY=$DISPLAY \\\n        -v /tmp/.X11-unix:/tmp/.X11-unix \\\n        gl"},{"type":"paragraph","children":[{"type":"text","value":"起動時にDISPLAYの指定と/tmp/.X11-unixのマウントをしています。前者に関してはホストのDISPLAYを指定することでホストにウィンドウが表示されるようにしています。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"NVIDIA container toolkit の導入"}]},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html","children":[{"type":"text","value":"公式のページ"}]},{"type":"text","value":"におおよその内容が乗っていますが、少しだけ内容が変わります。"}]},{"type":"code","lang":"shell","meta":null,"value":"$ distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \\\n      && curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\\n      && curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \\\n            sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \\\n            sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list\n$ sudo apt update\n$ sudo apt install nvidia-container-runtime -y"},{"type":"paragraph","children":[{"type":"text","value":"これでコンテナからNVIDIAのGPUが見えるようになります。"}]},{"type":"heading","depth":2,"children":[{"type":"text","value":"DockerでのGPU利用"}]},{"type":"code","lang":"shell","meta":null,"value":"$ docker run -it --rm \\\n        --gpus all \\\n        --hostname=gltest \\\n        -e DISPLAY=$DISPLAY \\\n        -e NVIDIA_DRIVER_CAPABILITIES=all \\\n        -v /tmp/.X11-unix:/tmp/.X11-unix \\\n        gl"},{"type":"paragraph","children":[{"type":"text","value":"コンテナ起動時に"},{"type":"inlineCode","value":"--gpus"},{"type":"text","value":"によりコンテナで使いたいGPUの指定を行い、NVIDIA_DRIVER_CAPABILITIESをallと指定することで、GPUによる計算やグラフィックス、GUIへの出力などすべての機能が使えるようになります。"}]},{"type":"paragraph","children":[{"type":"text","value":"こうして起動したコンテナ上でサンプルアプリケーションを実行してみると、ホスト上で以下のようにウィンドウを表示することができます。\n"},{"type":"image","title":null,"url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/568499/65b0049a-75b6-2a64-f65f-ea455f03855e.png","alt":"Screenshot from 2022-07-19 06-49-24.png"}]},{"type":"heading","depth":1,"children":[{"type":"text","value":"まとめ"}]},{"type":"paragraph","children":[{"type":"text","value":"　本記事ではDockerコンテナ内でOpenGLを用いたGUIアプリケーションを起動する方法を解説していきました。これに加えて、vscodeの拡張も使って開発を行っていけばホストで開発していくのと遜色ない利便性が得られると思います。シミュレーション系の研究をやっている方であれば環境を自由に作ったり消したりできて便利なので、非常にオススメです。"}]}]},"meta":{"tags":["OpenGL","Docker","Linux","GLFW"],"created":"Invalid Date","updated":"2023-08-16"}}